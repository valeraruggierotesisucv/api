generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}

model User {
  userId            String              @id @default(cuid())
  username          String
  fullName          String
  email             String           @unique
  profileImage      String?
  birthDate         DateTime
  biography         String?
  followers_counter Int              @default(0)
  following_counter Int              @default(0)
  notificationToken String? 

  events            Event[]
  followers         FollowUser[]     @relation("Followers")
  following         FollowUser[]     @relation("Following")
  notificationsSent Notification[]   @relation("NotificationsFromUser")
  notificationsReceived Notification[] @relation("NotificationsToUser")
  socialInteractions SocialInteraction[]
  comments          Comment[]
  likedCategories   Category[] @relation("UserLikedCategories")
}

model FollowUser {
  userIdFollows     String
  userIdFollowedBy  String
  createdAt         DateTime         @default(now())
  isActive          Boolean          @default(true)

  userFollows       User             @relation("Following", fields: [userIdFollows], references: [userId])
  userFollowedBy    User             @relation("Followers", fields: [userIdFollowedBy], references: [userId])

  @@id([userIdFollows, userIdFollowedBy])
}

model Notification {
  notificationId    String              @id @default(cuid())
  fromUserId        String
  toUserId          String
  type              NotificationType
  message           String
  createdAt         DateTime         @default(now())
  eventImage        String? 

  fromUser          User             @relation("NotificationsFromUser", fields: [fromUserId], references: [userId])
  toUser            User             @relation("NotificationsToUser", fields: [toUserId], references: [userId])
}

model Event {
  eventId           String              @id @default(cuid())
  userId            String
  eventImage        String
  eventMusic        String
  categoryId        Int
  locationId        String
  title             String
  description       String
  date              DateTime
  startsAt          DateTime
  endsAt            DateTime
  likesCounter      Int              @default(0)
  commentsCounter   Int              @default(0)
  createdAt         DateTime         @default(now())
  user              User             @relation(fields: [userId], references: [userId])
  category          Category         @relation(fields: [categoryId], references: [categoryId])
  location          Location         @relation(fields: [locationId], references: [locationId])
  comments          Comment[]
  socialInteractions SocialInteraction[]
}

model Comment {
  commentId         String              @id @default(cuid())
  userId            String
  eventId           String
  text              String
  createdAt         DateTime         @default(now())

  user              User             @relation(fields: [userId], references: [userId])
  event             Event            @relation(fields: [eventId], references: [eventId])
}

model SocialInteraction {
  userId            String
  eventId           String
  createdAt         DateTime         @default(now())
  isActive          Boolean          @default(true)

  user              User             @relation(fields: [userId], references: [userId])
  event             Event            @relation(fields: [eventId], references: [eventId])
  
  @@id([userId, eventId])
}

model Category {
  categoryId        Int              @id @default(autoincrement())
  nameEs            String
  nameEn            String
  description       String?
  
  events            Event[]
  usersWhoLike User[] @relation("UserLikedCategories")
}

model Location {
  locationId        String              @id @default(cuid())
  latitude          Float
  longitude         Float
  description       String?
  events            Event[]
}